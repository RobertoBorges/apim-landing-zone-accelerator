# Base pipeline to deploy APIM ESLZ with default configuration
# Instructions:
# 1) Create a service connection in Azure Devops to Github so the remote repo where the Bicep files
#    of APIM- ESLZ are located can be downloaded
# 2) Enter the correct name of the APIM- ESLZ repo and the name of the just created 
#    service endpoint for the Github on lines 22 and 23
# 3) Substitute all variable values in the connected template apim-eslz-vars.yml 
#    to align with your environment

trigger: none

resources:
  repositories:
  - repository: apimeslz
    type: github
    name: RobertoBorges/apim-landing-zone-accelerator
    endpoint: 'RobertoBorges (1)'

stages:
  - stage: validate_bicep
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: apim-eslz-vars-dev
    displayName: 'Fetch templates from github and validate '
    jobs:
      - job: validate_bicep
        steps:
          - checkout: apimeslz

          - task: AzureCLI@2
            inputs:
              azureSubscription: azure-pfeborges-subscription
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: | 
                
                echo validating bicep

                az deployment sub validate --location $(deploymentLocation) --template-file main.bicep --parameters workloadName=$(workloadName) environment=$(environment) vmUsername=$(vmUsername) vmPassword=$(vmPassword) accountName=$(sourceControlaccountName) personalAccessToken=$(personalAccessToken) CICDAgentType=$(CICDAgentType) appGatewayFqdn=$(appGatewayFqdn) certificatePassword=$(certificatePassword) appGatewayCertType=$(appGatewayCertType)
              workingDirectory: './reference-implementations/AppGW-IAPIM-Func/bicep'

  - stage: build-and-deploy
    displayName: 'Deploy all bicep artifacts'
    dependsOn: validate_bicep
    jobs:
      - deployment: 
        displayName: 'Deploy APIM ESLZ artifacts to Azure subscription'
        environment: $(environmentName)
        strategy:
         runOnce:
           deploy:
             steps:
              - task: AzureCLI@2
                inputs:
                  azureSubscription: '$(serviceConnectionName)'
                  scriptType: 'pscore'
                  scriptLocation: 'inlineScript'
                  inlineScript: | 
                    echo "Deploying to $(deploymentLocation) with name prefix $(workloadName) and environment tag $(environment)"
            
              - task: AzureCLI@2
                inputs:
                  azureSubscription: azure-pfeborges-subscription
                  scriptType: 'pscore'
                  scriptLocation: 'inlineScript'
                  inlineScript: | 
                    
                    echo validating bicep

                    az deployment sub create --location $(deploymentLocation) --template-file main.bicep --parameters workloadName=$(workloadName) environment=$(environment) vmUsername=$(vmUsername) vmPassword=$(vmPassword) accountName=$(sourceControlaccountName) personalAccessToken=$(personalAccessToken) CICDAgentType=$(CICDAgentType) appGatewayFqdn=$(appGatewayFqdn) certificatePassword=$(certificatePassword) appGatewayCertType=$(appGatewayCertType)
                  workingDirectory: './reference-implementations/AppGW-IAPIM-Func/bicep'
# ________OLD_______
#     jobs:
#       - job: publish_artifact_to_pipeline
#         displayName: 'Publish bicep files as artifact to pipeline'
#         steps:
#           - checkout: apimeslz
#           - task: PublishPipelineArtifact@1
#             inputs:
#               targetPath: '$(Pipeline.Workspace)/s/reference-implementations/AppGW-IAPIM-Func/bicep'
#               artifact: $(artifactName)
#               publishLocation: 'pipeline'

#   - stage: deploy_artifacts
#     variables:
#     - group: apim-eslz-vars-dev  
#     displayName: 'Deploy all bicep artifacts'
#     jobs:
#       - deployment: 
#         displayName: 'Deploy APIM ESLZ artifacts to Azure subscription'
#         environment: $(environmentName)
#         strategy:
#          runOnce:
#            deploy:
#              steps:
#                - download: current
#                  artifact: $(artifactName)
#                - task: AzureCLI@2
#                  inputs:
#                    azureSubscription: $(serviceConnectionName)
#                    scriptType: 'pscore'
#                    scriptLocation: 'inlineScript'
#                    inlineScript: |
#                     echo "using serviceconnection :" $(serviceConnectionName)
#                     az deployment sub create --location $(deploymentLocation) --name $(deploymentName) --template-file $(Pipeline.Workspace)/$(artifactName)/main.bicep --parameters workloadName=$(workloadName) environment=$(eslzEnvironmentType)

